@page "/SampleData"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userdata;
@inject ISuggestionData suggestionData;

<h3>SampleData</h3>

@if (categoriesCreated)
{
    <h4>Categories have been created</h4>
}
else
{
    <button class="btn alert-primary" @onclick="CreateCategories">Create Categories</button>
}

@if (statusesCreated)
{
    <h4>Statuses have been created</h4>
}
else
{
    <button class="btn alert-primary" @onclick="CreateStatuses">Create Statuses</button>

}

<button class="btn btn-primary" @onclick="GenerateSampleData">Generate Sample Data</button>

@code
{
    private bool categoriesCreated;
    private bool statusesCreated;

    private async Task GenerateSampleData()
    {
        await userdata.CreateUser(new UserModel
            {
                FirstName = "Bruno",
                LastName = "Silva",
                EmailAdress = "bruno@mail.com",
                DisplayName = "Sample Bruno Silva",
                ObjectIdentifier = "abc-123"
            });

        var foundUser = await userdata.GetUserFromAuthentication("abc-123");
        var categories = await categoryData.GetAllCategories();
        var statuses = await statusData.GetAllStatuses();
        var votes = new HashSet<string>
        {
            "1", "2", "3"
        };


        await suggestionData.CreateSuggestion(new SuggestionModel
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[0],
                Suggestion = "Our First Suggestion",
                Description = "This is a suggestion created by the sample data generation method."
            });


        await suggestionData.CreateSuggestion(new SuggestionModel
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[1],
                Suggestion = "Our First Suggestion",
                Description = "This is a suggestion created by the sample data generation method.",
                SuggestionStatus = statuses[0],
                OwnerNotes = "This is the note for the status."
            });


        await suggestionData.CreateSuggestion(new SuggestionModel
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[2],
                Suggestion = "Our Third Suggestion",
                Description = "This is a suggestion created by the sample data generation method.",
                SuggestionStatus = statuses[1],
                OwnerNotes = "This is the note for the status."
            });

        await suggestionData.CreateSuggestion(new SuggestionModel
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[3],
                Suggestion = "Our Fourth Suggestion",
                Description = "This is a suggestion created by the sample data generation method.",
                SuggestionStatus = statuses[2],
                UserVotes = votes,
                OwnerNotes = "This is the note for the status."
            });

        votes.Add("4");


        await suggestionData.CreateSuggestion(new SuggestionModel
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[4],
                Suggestion = "Our Fifth Suggestion",
                Description = "This is a suggestion created by the sample data generation method.",
                SuggestionStatus = statuses[3],
                UserVotes = votes,
                OwnerNotes = "This is the note for the status."
            });
    }

    private async Task CreateCategories()
    {
        var categories = await categoryData.GetAllCategories();

        if (categories?.Count > 0)
        {
            return;
        }

        var cat = new CategoryModel
            {
                CategoryName = "Courses",
                CategoryDescription = "Full Paid Courses."

            };

        await categoryData.CreateCategory(cat);

        cat = new CategoryModel
            {
                CategoryName = "Dev Questions",
                CategoryDescription = "Advise on being a developer."

            };

        await categoryData.CreateCategory(cat);

        cat = new CategoryModel
            {
                CategoryName = "In-Depth Tutorial",
                CategoryDescription = "A deep-dive video on how to use a topic."

            };

        await categoryData.CreateCategory(cat);

        cat = new CategoryModel
            {
                CategoryName = "10-Minute Training",
                CategoryDescription = "A quick \"How do I use this?\" video."

            };

        await categoryData.CreateCategory(cat);


        cat = new CategoryModel
            {
                CategoryName = "Other",
                CategoryDescription = "Not sure which category this fits in."

            };

        await categoryData.CreateCategory(cat);

        categoriesCreated = true;
    }

    private async Task CreateStatuses()
    {
        var statuses = await statusData.GetAllStatuses();
        if (statuses?.Count > 0) return;

        await statusData.CreateCategory(new StatusModel
            {
                StatusName = "Completed",
                StatusDescription = "The suggestion was accepted and the corresponding item was created."
            });

        await statusData.CreateCategory(new StatusModel
            {
                StatusName = "Watching",
                StatusDescription = "The suggestion is interesting. We are watching to see how much interest there is in it."
            });

        await statusData.CreateCategory(new StatusModel
            {
                StatusName = "Upcoming",
                StatusDescription = "The suggestion was accepted and it will be released soon."
            });

        await statusData.CreateCategory(new StatusModel
            {
                StatusName = "Dismmised",
                StatusDescription = "The suggestion was not something that we are going to undertake."
            });

        statusesCreated = true;
    }
  }

